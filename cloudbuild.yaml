steps:
  - id: "Build community builders image for terraform / firebase"
    name: "gcr.io/cloud-builders/git"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      git clone https://github.com/GoogleCloudPlatform/cloud-builders-community
      cd cloud-builders-community/terraform
      gcloud builds submit --config cloudbuild.yaml .
      cd .. 

      cd firebase
      gcloud builds submit --config cloudbuild.yaml .
      cd ../..

      cd firebase
      find ./.firebaserc -type f -exec sed -i 's/<GCP_PROJECT_ID>/${PROJECT_ID}/g' {} \;
      cat ./.firebaserc
      

  - id: "Create bucket for terraform state if it doesnt exists"
    name: "gcr.io/${PROJECT_ID}/terraform"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud auth list --filter=status:ACTIVE --format="value(account)"
      chmod +x init.sh 
      ./init.sh $PROJECT_NUMBER


  - id: "Enable required GCP APIs"
    name: "gcr.io/${PROJECT_ID}/terraform"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      terraform -chdir=terraform init -backend-config="bucket=${PROJECT_NUMBER}-cloud-resume-challenge-bucket"
      terraform -chdir=terraform import google_app_engine_application.app ${PROJECT_ID}
      terraform -chdir=terraform apply -auto-approve -var project=${PROJECT_ID}


  - id: "Setup firebase rules"
    name: "gcr.io/${PROJECT_ID}/firebase"
    entrypoint: 'bash'
    args:
    - '-c' 
    - |
      cd firebase
      firebase deploy --only firestore:rules


options:
  logStreamingOption: STREAM_ON

substitutions:
  _SERVICE_NAME: cloud-resume-challenge

images:
  - "asia-docker.pkg.dev/${PROJECT_ID}/${_SERVICE_NAME}/${_SERVICE_NAME}"